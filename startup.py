"""
Script de d√©marrage du syst√®me de candidature automatique
"""

import sys
import argparse
from pathlib import Path
import logging
from config import *
from job_automation_system import JobAutomationSystem
import subprocess

def setup_logging():
    """Configure le syst√®me de logging"""
    logging.basicConfig(
        level=getattr(logging, LOGGING_CONFIG["level"]),
        format=LOGGING_CONFIG["format"],
        handlers=[
            logging.FileHandler(LOGGING_CONFIG["file_path"]),
            logging.StreamHandler(sys.stdout)
        ]
    )

def create_cv_template():
    """Cr√©e le template de CV s'il n'existe pas"""
    cv_path = CV_CONFIG["base_template_path"]
    
    if not cv_path.exists():
        print(f"üìù Cr√©ation du template CV: {cv_path}")
        
        cv_content = """JULIANA NIAPOH
CDI DATA & IA | SCRUM MASTER & GESTION DE PROJET AGILE

CONTACT
üìç 93300, Aubervilliers | üïí Disponibilit√© : Octobre 2025
üìß Jniapoh@gmail.com | üìû 0622855341
üîó LinkedIn | Portfolio/website

EXP√âRIENCES PROFESSIONNELLES

Alternance Assistante cheffe de projet num√©rique (2024/2025)
SNCF, Saint-Denis - FERROVIAIRE
‚Ä¢ Coordination de projets IT en mode Agile (Scrum), pilotage de projets de transformation num√©rique
‚Ä¢ Gestion d'un portail collaboratif pour la m√©decine du travail, r√©duisant les d√©lais de communication de 30%
‚Ä¢ Support utilisateur niveau 3 et r√©solution d'incidents complexes
‚Ä¢ Animation de formations techniques et fonctionnelles pour les nouveaux outils d√©ploy√©s

Alternance Charg√©e de projet Digital (2022/2023)
ORANO, Ch√¢tillon - √âNERGIE NUCL√âAIRE
‚Ä¢ Analyse et optimisation des flux de donn√©es existants
‚Ä¢ D√©veloppement de solutions de donn√©es et coordination des √©quipes
‚Ä¢ Formation des √©quipes √† l'utilisation des nouveaux outils de visualisation
‚Ä¢ Cr√©ation de guides et documentation utilisateur

FORMATION
Master Data Management (2023/2025) - Paris School of Business, Paris
Bachelor E-commerce & Marketing num√©rique (2022/2023) - Paris School of Business, Paris
DUT Statistiques & Informatiques D√©cisionnelles (2020/2022) - Universit√© Sorbonne Paris Nord

COMP√âTENCES TECHNIQUES
‚Ä¢ Langages: Python, SQL, R, JavaScript, HTML/CSS
‚Ä¢ Machine Learning: Scikit-learn, algorithmes pr√©dictifs, NLP
‚Ä¢ Data Visualisation: Power BI, Tableau de bord, Jupyter Notebook
‚Ä¢ Big Data: Analyse de grands ensembles de donn√©es, nettoyage de donn√©es
‚Ä¢ Gestion de Projet: M√©thode Agile (Scrum, Kanban), Jira, Trello
‚Ä¢ Bases de Donn√©es: Requ√™tes complexes, optimisation, migration

PROJETS ACAD√âMIQUES
‚Ä¢ Base de donn√©es SQL WorkBench: Conception et optimisation d'une base de donn√©es relationnelle
‚Ä¢ IA Student Assistance: D√©veloppement d'une solution d'assistance √©tudiante bas√©e sur l'IA (NLP)
‚Ä¢ Tableau de bord RH (Python): Outil de visualisation des donn√©es RH avec Python (Pandas, Matplotlib, Streamlit)

SOFT SKILLS
‚Ä¢ Esprit d'analyse et r√©solution de probl√®mes complexes
‚Ä¢ Collaboration en √©quipe et coordination
‚Ä¢ Adaptabilit√© et gestion du changement
‚Ä¢ Communication et formation d'√©quipes"""
        
        with open(cv_path, 'w', encoding='utf-8') as f:
            f.write(cv_content)
        
        print("‚úÖ Template CV cr√©√© avec succ√®s")

def run_dashboard():
    """Lance le dashboard web"""
    print("üöÄ Lancement du dashboard web...")
    try:
        subprocess.run([sys.executable, "-m", "streamlit", "run", "dashboard.py"], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors du lancement du dashboard")
        print("Installez streamlit: pip install streamlit")

def run_automation(profile: str, dry_run: bool = False):
    """Lance l'automatisation"""
    print(f"ü§ñ D√©marrage de l'automatisation avec le profil: {profile}")
    
    if not validate_config():
        return False
    
    profile_config = get_profile_config(profile)
    
    if dry_run:
        print("üß™ Mode DRY RUN - Aucune candidature ne sera envoy√©e")
        print(f"Configuration utilis√©e: {profile_config}")
        return True
    
    try:
        system = JobAutomationSystem(OPENAI_API_KEY)
        system.run_full_cycle(
            search_keywords=profile_config["keywords"],
            location=profile_config["location"]
        )
        
        # Affichage des r√©sultats
        dashboard_data = system.get_dashboard_data()
        print("\nüìä R√âSULTATS:")
        print(f"Total offres scrap√©es: {dashboard_data['total_jobs']}")
        print(f"Candidatures envoy√©es: {dashboard_data['applied']}")
        print(f"R√©ponses re√ßues: {dashboard_data['responded']}")
        
        return True
        
    except Exception as e:
        logging.error(f"Erreur lors de l'automatisation: {e}")
        return False
    finally:
        if 'system' in locals():
            system.cleanup()

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description="Syst√®me de candidature automatique")
    
    parser.add_argument("command", choices=["dashboard", "run", "setup", "validate"], 
                       help="Commande √† ex√©cuter")
    
    parser.add_argument("--profile", default=DEFAULT_PROFILE,
                       choices=list(SEARCH_PROFILES.keys()),
                       help="Profil de recherche √† utiliser")
    
    parser.add_argument("--dry-run", action="store_true",
                       help="Mode test sans envoi de candidatures")
    
    args = parser.parse_args()
    
    # Configuration du logging
    setup_logging()
    
    print("ü§ñ Syst√®me de Candidature Automatique - Juliana Niapoh")
    print("=" * 60)
    
    if args.command == "setup":
        print("‚öôÔ∏è  Configuration initiale...")
        create_cv_template()
        validate_config()
        print("\n‚úÖ Configuration termin√©e!")
        print("\nCommandes disponibles:")
        print("  - python startup.py dashboard  # Lance l'interface web")
        print("  - python startup.py run        # Lance l'automatisation")
        print("  - python startup.py validate   # Valide la configuration")
    
    elif args.command == "validate":
        validate_config()
    
    elif args.command == "dashboard":
        run_dashboard()
    
    elif args.command == "run":
        success = run_automation(args.profile, args.dry_run)
        if not success:
            sys.exit(1)
    
    print("\nüéâ Termin√©!")

if __name__ == "__main__":
    main()
